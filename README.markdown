# Termux-is-Black

<a href='https://postimg.cc/m1QfQDP6' target='_blank'><img src='https://i.postimg.cc/m1QfQDP6/Chat-GPT-Image-28-Apr-2025-11-15-54.png' border='0' alt='Chat-GPT-Image-28-Apr-2025-11-15-54'/></a> <!-- Ersetze durch einen tats√§chlichen Banner-Link, falls verf√ºgbar -->

Willkommen bei **Termux-is-Black**, dem ultimativen Bash-Skript f√ºr Termux, das deine Terminal-Erfahrung auf Android revolutioniert! Dieses Skript bietet ein interaktives Men√º mit leistungsstarken Tools f√ºr Python-Entwicklung, Systemverwaltung, Netzwerkanalyse, Backups und mehr. Entwickelt f√ºr die **MIB Main in Black**-Community, ist es sowohl f√ºr Anf√§nger als auch f√ºr Profis geeignet.

## üåü √úberblick

`startup.sh` ist ein vielseitiges Bash-Skript, das Termux-Benutzern hilft, ihre Umgebung effizient zu verwalten. Es bietet:

- Ein farbiges, kategorisiertes Men√º mit benutzerfreundlicher Navigation.
- Automatisierung von Python-Modul-Installationen und Skriptausf√ºhrung (inkl. Debugging).
- Netzwerk- und Sicherheits-Tools wie Port-Scans und SSH-Verwaltung.
- Backup-, Git- und Update-Funktionen.
- Ein flexibles Plugin-System mit automatischer Synchronisation aus dem Repository.
- Anpassbare Themes und ein interaktives Tutorial f√ºr neue Nutzer.
- Sicherheitspr√ºfungen f√ºr Python-Skripte.

Ob du Python-Skripte debuggen, dein System aktualisieren oder eigene Plugins entwickeln m√∂chtest ‚Äì **Termux-is-Black** hat alles, was du brauchst!

## üöÄ Installation

1. **Termux vorbereiten**:
   - Installiere Termux aus dem F-Droid Store oder GitHub.
   - Aktualisiere die Pakete:
     ```bash
     pkg update && pkg upgrade -y
     ```

2. **Skript herunterladen**:
   - Lade `startup.sh` aus diesem Repository:
     ```bash
     wget https://raw.githubusercontent.com/MrBlack-ctrl/Termux-is-Black/main/startup.sh -O ~/startup.sh
     ```
   - Mache es ausf√ºhrbar:
     ```bash
     chmod +x ~/startup.sh
     ```

3. **Skript starten**:
   - F√ºhre das Skript aus:
     ```bash
     ./startup.sh
     ```
   - Das Skript richtet sich automatisch f√ºr den Autostart ein und erstellt eine Konfigurationsdatei (`~/.termux_startup.conf`).

4. **Optional: Repository klonen**:
   - Wenn du das gesamte Repository (inkl. Plugins) nutzen m√∂chtest:
     ```bash
     pkg install git
     git clone https://github.com/MrBlack-ctrl/Termux-is-Black.git
     cd Termux-is-Black
     chmod +x startup.sh
     ./startup.sh
     ```

## üñ•Ô∏è Verwendung

Nach dem Start von `./startup.sh` √∂ffnet sich ein farbiges Men√º, unterteilt in Kategorien:

### üêç Python-Optionen
1. **Py-Module Auto-Install**: Scannt Python-Skripte und installiert fehlende Module.
2. **Python Skript starten**: F√ºhrt Python-Skripte aus einem definierten Verzeichnis aus (mit Debugging via `pdb`).
3. **Py-Module Manuell**: Installiert Python-Module nach Benutzereingabe (z. B. `requests==2.28.1`).
4. **Py-Module Deinstallieren**: Entfernt angegebene Python-Module.

### üì¶ pkg-Optionen
5. **Update System**: Aktualisiert alle Termux-Pakete (`pkg update && pkg upgrade`).
6. **Dateimanager**: Startet `mc` (Midnight Commander), falls installiert.
7. **Prozesse**: Zeigt Prozesse mit `htop`, falls installiert.
8. **Netzwerk Info**: Zeigt Netzwerkdetails mit `ifconfig`, falls installiert.
9. **Paket installieren**: Erm√∂glicht die manuelle Installation von Termux-Paketen.

### üåê Netzwerk & Sicherheit
10. **Netzwerk Scan**: F√ºhrt Ping-, TCP- oder UDP-Scans mit `nmap` durch.
11. **SSH-Server Verwaltung**: Startet, stoppt oder pr√ºft den Status eines SSH-Servers.

### üíæ Backup, Git & Update
12. **Termux Backup**: Erstellt ein Backup von `~/` als `.tar.gz`-Datei.
13. **Git Helfer**: Verwaltet Git-Repositorys (Status, Pull, Commit, Push).
14. **Skript aktualisieren**: L√§dt die neueste Version von `startup.sh` aus diesem Repository.

### ‚öôÔ∏è Sonstiges
15. **.bashrc bearbeiten**: √ñffnet `~/.bashrc` in `nano` zur Bearbeitung.
16. **Konfiguration bearbeiten**: Bearbeitet die Konfigurationsdatei (`~/.termux_startup.conf`) in `nano`.
17. **Interaktives Tutorial**: Bietet eine Einf√ºhrung in die Hauptfunktionen.
18. **Beenden**: Beendet das Skript.

### üîå Plugins
19+. **Dynamische Plugins**: F√ºhrt benutzerdefinierte Plugins aus `~/.termux_is_black_plugins` aus.
24. **Plugins synchronisieren und Ordner √∂ffnen**: Synchronisiert Plugins aus dem Repository und √∂ffnet das Plugin-Verzeichnis.

Navigiere durch das Men√º, indem du die entsprechende Nummer eingibst und mit Enter best√§tigst.

## üîç Funktions√ºbersicht

Hier ist eine detaillierte Beschreibung aller Funktionen:

1. **Py-Module Auto-Install** (`pip`):
   - Scannt `.py`-Dateien in `PYTHON_SCRIPT_DIR` auf `import`-Anweisungen.
   - Installiert fehlende Module mit `pip`, ignoriert Standardmodule (z. B. `os`, `sys`).
   - F√§hrt bei Fehlern fort, um maximale Kompatibilit√§t zu gew√§hrleisten.

2. **Python Skript starten** (`python`):
   - Listet alle `.py`-Dateien in `PYTHON_SCRIPT_DIR`.
   - F√ºhrt das ausgew√§hlte Skript mit der konfigurierten Python-Version aus.
   - Bietet eine Debugging-Option mit `pdb` (Eingabe `d`).
   - Pr√ºft Skripte auf unsichere Imports (z. B. `os.system`, `subprocess`) und warnt den Benutzer.

3. **Py-Module Manuell** (`pip`):
   - Erm√∂glicht die Installation von Python-Modulen nach Benutzereingabe.
   - Unterst√ºtzt Versionsangaben (z. B. `requests==2.28.1`).

4. **Py-Module Deinstallieren** (`pip`):
   - Listet installierte Module und erlaubt deren Deinstallation.
   - Protokolliert alle Aktionen.

5. **Update System** (`pkg`):
   - F√ºhrt `pkg update && pkg upgrade -y` aus, um alle Termux-Pakete zu aktualisieren.
   - Zeigt eine Fortschrittsanzeige f√ºr langlaufende Operationen.

6. **Dateimanager** (`mc`):
   - Startet den Midnight Commander (`mc`), ein Terminal-basierter Dateimanager.
   - Installiert `mc`, wenn es fehlt (nach Best√§tigung).

7. **Prozesse** (`htop`):
   - Zeigt laufende Prozesse mit `htop`, einem interaktiven Prozess-Viewer.
   - Installiert `htop`, wenn es fehlt.

8. **Netzwerk Info** (`ifconfig`):
   - Zeigt Netzwerkdetails (z. B. IP-Adressen) mit `ifconfig`.
   - Installiert `net-tools`, wenn es fehlt.

9. **Paket installieren** (`pkg`):
   - Erm√∂glicht die Eingabe von Paketnamen (z. B. `vim curl`) zur Installation mit `pkg install`.

10. **Netzwerk Scan** (`nmap`):
    - F√ºhrt einen Ping-, TCP- oder UDP-Scan mit `nmap` durch, um Ger√§te oder offene Ports im Netzwerk zu finden.
    - Erkennt automatisch das lokale Subnetz (z. B. `192.168.1.0/24`).

11. **SSH-Server Verwaltung** (`sshd`):
    - Startet, stoppt oder pr√ºft den Status eines SSH-Servers.
    - Installiert `openssh`, wenn es fehlt.

12. **Termux Backup** (`tar`):
    - Erstellt ein komprimiertes Backup von `~/` in `~/storage/shared/termux_backups`.
    - Dateien werden mit Zeitstempel benannt (z. B. `termux_backup_20250428_123456.tar.gz`).

13. **Git Helfer**:
    - Verwaltet Git-Repositorys mit Optionen f√ºr:
      - `git status`: Zeigt den Status des Repositorys.
      - `git pull`: Holt √Ñnderungen vom Remote-Repository.
      - `git commit`: Commited lokale √Ñnderungen mit einer Nachricht.
      - `git push`: Pusht √Ñnderungen zum Remote-Repository.

14. **Skript aktualisieren** (`github`):
    - Pr√ºft, ob eine neuere Version von `startup.sh` im Repository verf√ºgbar ist.
    - Nutzt `git pull` (in einem Git-Repository) oder `wget` (direkter Download).
    - Erstellt ein Backup und startet das aktualisierte Skript neu.

15. **.bashrc bearbeiten** (`nano`):
    - √ñffnet `~/.bashrc` in `nano` zur Bearbeitung von Shell-Einstellungen.
    - √Ñnderungen werden beim n√§chsten Termux-Start wirksam.

16. **Konfiguration bearbeiten** (`nano`):
    - √ñffnet `~/.termux_startup.conf` in `nano` zur Bearbeitung.
    - Validiert √Ñnderungen (z. B. Existenz von `PYTHON_SCRIPT_DIR`, g√ºltiges `THEME`).

17. **Interaktives Tutorial**:
    - Bietet eine Schritt-f√ºr-Schritt-Einf√ºhrung in wichtige Funktionen (Python-Skripte, System-Update, Netzwerk-Scan, Backup).
    - Ideal f√ºr neue Benutzer.

18. **Beenden**:
    - Beendet das Skript und entfernt die Autostart-Variable.

19+. **Dynamische Plugins**:
    - L√§dt und f√ºhrt benutzerdefinierte Bash-Skripte aus `~/.termux_is_black_plugins` aus.
    - Plugins m√ºssen eine Funktion `run_<plugin_name>` definieren.

24. **Plugins synchronisieren und Ordner √∂ffnen**:
    - Synchronisiert Plugins aus dem Repository (`https://raw.githubusercontent.com/MrBlack-ctrl/Termux-is-Black/main/plugins/`).
    - √ñffnet `~/.termux_is_black_plugins` in `mc` (falls installiert) oder zeigt es mit `ls`.

## ‚öôÔ∏è Konfigurationsdatei

Die Konfigurationsdatei (`~/.termux_startup.conf`) wird beim ersten Start erstellt und enth√§lt:

```bash
# Termux Startup Konfiguration
SCRIPT_NAME="startup.sh"
PYTHON_SCRIPT_DIR="$HOME/storage/shared/py"
PYTHON_CMD="python3"
BASHRC_FILE="$HOME/.bashrc"
AUTOSTART_MARKER="# AUTOSTART_TERMUX_SCRIPT_V1"
LOG_FILE="$HOME/termux_startup.log"
THEME="default" # Verf√ºgbare Themes: default, dark, mib, light
PLUGIN_REPO_URL="https://raw.githubusercontent.com/MrBlack-ctrl/Termux-is-Black/main/plugins/"
```

**Anpassungen**:
- **PYTHON_SCRIPT_DIR**: √Ñndere das Verzeichnis f√ºr Python-Skripte (Standard: `~/storage/shared/py`).
- **PYTHON_CMD**: Setze eine spezifische Python-Version (z. B. `python3.11`).
- **LOG_FILE**: √Ñndere den Speicherort f√ºr Logs.
- **THEME**: W√§hle ein Farbschema (`default`, `dark`, `mib`, `light`).
- **PLUGIN_REPO_URL**: √Ñndere die URL f√ºr Plugin-Synchronisation, falls du ein anderes Repository nutzt.

Bearbeite die Datei mit Option 16 oder direkt:
```bash
nano ~/.termux_startup.conf
```

## üîå Plugin-System

Das Skript unterst√ºtzt benutzerdefinierte Plugins, die in `~/.termux_is_black_plugins` gespeichert werden. Plugins sind Bash-Skripte (`.sh`), die eine Funktion `run_<plugin_name>` definieren m√ºssen. Beispiel:

```bash
# ~/.termux_is_black_plugins/hello.sh
run_hello() {
    echo "Hallo vom Hello-Plugin!"
    read -p "Weiter..."
}
```

### Automatische Plugin-Synchronisation
- W√§hle Option 24, um Plugins automatisch aus dem Repository (`https://raw.githubusercontent.com/MrBlack-ctrl/Termux-is-Black/main/plugins/`) herunterzuladen.
- Plugins werden in `~/.termux_is_black_plugins` gespeichert und im Men√º als dynamische Optionen (ab 19) angezeigt.
- Lokale Plugins (manuell hinzugef√ºgt) koexistieren mit synchronisierten Plugins.

### Plugins zum Repository hinzuf√ºgen
- Erstelle ein `plugins/`-Verzeichnis in deinem Repository und f√ºge `.sh`-Dateien hinzu.
- Benutzer erhalten diese Plugins automatisch √ºber Option 24.
- Beispiel-Repository-Struktur:
  ```
  Termux-is-Black/
  ‚îú‚îÄ‚îÄ startup.sh
  ‚îú‚îÄ‚îÄ README.md
  ‚îî‚îÄ‚îÄ plugins/
      ‚îú‚îÄ‚îÄ hello.sh
      ‚îú‚îÄ‚îÄ backup.sh
  ```

**Tipp**: Community-Mitglieder k√∂nnen eigene Plugins erstellen und Pull Requests einreichen, um sie dem Repository hinzuzuf√ºgen!

## üõ†Ô∏è Fehlerbehebung

- **Skript startet nicht**: Stelle sicher, dass es ausf√ºhrbar ist (`chmod +x startup.sh`) und die richtigen Pakete installiert sind (`pkg install wget git nano`).
- **Python-Skripte werden nicht gefunden**: √úberpr√ºfe, ob `PYTHON_SCRIPT_DIR` existiert und `.py`-Dateien enth√§lt. F√ºhre `termux-setup-storage` aus, falls n√∂tig.
- **Plugin-Synchronisation fehlschl√§gt**: Pr√ºfe die Internetverbindung und die Logs in `~/termux_startup.log`. Stelle sicher, dass das `plugins/`-Verzeichnis im Repository existiert.
- **Unsichere Python-Skripte**: Das Skript warnt vor potenziell gef√§hrlichen Imports. √úberpr√ºfe Skripte manuell, bevor du sie ausf√ºhrst.
- **Themes funktionieren nicht**: Stelle sicher, dass `THEME` in `~/.termux_startup.conf` auf `default`, `dark`, `mib` oder `light` gesetzt ist.

## üåê Community

Tritt der **MIB Main in Black**-Community bei, um Tipps, Plugins und Updates zu teilen!
- **Telegram-Gruppe**: [üì¢ MIB Main in Black](https://t.me/+Mde3XjyTPUFlMjQy)
- **Entwickler**: [üßë‚Äçüíª Mr.Black](https://t.me/MrBlackHead01)
- **GitHub Issues**: Melde Bugs oder schlage neue Funktionen vor: [Issues](https://github.com/MrBlack-ctrl/Termux-is-Black/issues)

## ü§ù Mitwirken

Wir freuen uns √ºber Beitr√§ge! So kannst du helfen:
- **Plugins entwickeln**: Erstelle `.sh`-Dateien mit `run_<plugin_name>`-Funktionen und reiche sie als Pull Request ein.
- **Funktionen vorschlagen**: √ñffne ein Issue mit deinen Ideen.
- **Dokumentation verbessern**: Aktualisiere diese README oder f√ºge Tutorials hinzu.
- **Bugs melden**: Teile Fehler in der Telegram-Gruppe oder auf GitHub.

1. Forke das Repository.
2. Erstelle einen Branch (`git checkout -b feature/awesome-plugin`).
3. Commit deine √Ñnderungen (`git commit -m "Add awesome plugin"`).
4. Pushe den Branch (`git push origin feature/awesome-plugin`).
5. √ñffne einen Pull Request.

## üìú Lizenz

Dieses Projekt ist unter der MIT-Lizenz ver√∂ffentlicht. Siehe [LICENSE](LICENSE) f√ºr Details.

## üôå Danksagung

- **[üßë‚Äçüíª Mr.Black](https://t.me/MrBlackHead01)** f√ºr die Vision, Leitung und Entwicklung des Projekts.
- **Walter, C3PO, B√ºchereule, Onkel iROBOT, by MEXX, LUCA und Nicolas** f√ºr ihren unerm√ºdlichen Einsatz, in der [üì¢ MIB Main in Black](https://t.me/+Mde3XjyTPUFlMjQy)-Community f√ºr Ordnung zu sorgen und den R√ºcken freizuhalten.
- **MIB Main in Black**-Community f√ºr Inspiration und Feedback.
- Termux-Entwickler f√ºr die gro√üartige Plattform.
- Alle Mitwirkenden, die Plugins, Ideen und Bugfixes beigesteuert haben.

---

**Termux-is-Black** ‚Äì Dein Tor zur Macht des Terminals! üöÄ
